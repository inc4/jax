package mining

import (
	"encoding/hex"
	"github.com/inc4/jax/mining/test"
	"github.com/stretchr/testify/assert"
	"io"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestTask(t *testing.T) {
	rpcOutputCh := make(chan string, 10)

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		res, err := io.ReadAll(r.Body)
		if err != nil {
			t.Fatal(err)
		}
		rpcOutputCh <- hex.EncodeToString(res)
		w.Write([]byte("{\"result\": null}"))
	}))
	defer ts.Close()

	url := "http://a:a@" + strings.TrimPrefix(ts.URL, "http://")
	miner, err := NewMiner(url, "mzDGR33maDBujpqjkvxVzY2ssYDcQG51p3", "mxQsksaTJb11i7vSxAUL6VBjoQnhP3bfFz")
	if err != nil {
		t.Fatal(err)
	}

	err = miner.job.ProcessBeaconTemplate(test.GetBeacon())
	if err != nil {
		t.Fatal(err)
	}
	err = miner.job.ProcessShardTemplate(test.GetShard(), 1)
	if err != nil {
		t.Fatal(err)
	}

	btcHeader, _ := hex.DecodeString("00004020b6ef34e5bcb9662ee1645ab64feb6c5ec29f4e5ab2329c010000000000000000d927ccc17e9e89d135988350c6138545a0798d12ae51adb4995dbfe9adcf71d9e1f33461ba6a0418c7a734ac")
	coinbaseTx, _ := hex.DecodeString("01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff3c0369561608ffffffffffffffff2028cd7057e92b29dc6c5fbedb17d6e3e1c1162954f066bd704d606424cf3b47db0d2f503253482f6a61786e65742fffffffff030000000000000000176a152068747470733a2f2f6a61782e6e6574776f726b200046c3230000000001511027000000000000015100000000")

	err = miner.Solution(btcHeader, coinbaseTx)
	if err != nil {
		t.Fatal(err)
	}

	// todo check what inside
	h := <-rpcOutputCh
	assert.Equal(t, "7b226a736f6e727063223a22312e30222c226d6574686f64223a227375626d6974626c6f636b222c2273636f7065223a22636861696e222c2273686172645f6964223a302c22706172616d73223a5bd2c226964223a317d", h)
	h = <-rpcOutputCh
	assert.Equal(t, "7b226a736f6e727063223a22312e30222c226d6574686f64223a227375626d6974626c6f636b222c2273636f7065223a22636861696e222c2273686172645f6964223a312c22706172616d73223a5bd2c226964223a327d", h)
}
