package mining

import (
	"encoding/hex"
	"github.com/inc4/jax/mining/test"
	"github.com/stretchr/testify/assert"
	"io"
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"
)

func TestTask(t *testing.T) {
	rpcOutputCh := make(chan string, 10)

	ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		res, err := io.ReadAll(r.Body)
		if err != nil {
			t.Fatal(err)
		}
		rpcOutputCh <- string(res)
		w.Write([]byte("{\"result\": null}"))
	}))
	defer ts.Close()

	url := "http://a:a@" + strings.TrimPrefix(ts.URL, "http://")
	miner, err := NewMiner(url, "mzDGR33maDBujpqjkvxVzY2ssYDcQG51p3", "mxQsksaTJb11i7vSxAUL6VBjoQnhP3bfFz")
	if err != nil {
		t.Fatal(err)
	}

	err = miner.Job.ProcessBeaconTemplate(test.GetBeacon())
	if err != nil {
		t.Fatal(err)
	}
	err = miner.Job.ProcessShardTemplate(test.GetShard(), 1)
	if err != nil {
		t.Fatal(err)
	}

	btcHeader, _ := hex.DecodeString("00004020b6ef34e5bcb9662ee1645ab64feb6c5ec29f4e5ab2329c010000000000000000d927ccc17e9e89d135988350c6138545a0798d12ae51adb4995dbfe9adcf71d9e1f33461ba6a0418c7a734ac")
	coinbaseTx, _ := hex.DecodeString("01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff3c0369561608ffffffffffffffff2028cd7057e92b29dc6c5fbedb17d6e3e1c1162954f066bd704d606424cf3b47db0d2f503253482f6a61786e65742fffffffff030000000000000000176a152068747470733a2f2f6a61782e6e6574776f726b200046c3230000000001511027000000000000015100000000")

	err = miner.Solution(btcHeader, coinbaseTx)
	if err != nil {
		t.Fatal(err)
	}

	h := <-rpcOutputCh
	assert.Equal(t, "{\"jsonrpc\":\"1.0\",\"method\":\"submitblock\",\"scope\":\"chain\",\"shard_id\":0,\"params\":[\"000000201feab96d70a7d50efbe085423c4b82c0208e742ceb9575e9e0b61ba7b7935fa0a1b001c120e836c7ca347ea64156140f9f5cfa8289aa30b6e5edeba5906e91adf52de7e27de9836be7a6eebccfe2229ceef62bc4f770f51eaf5ff55b2d65d1ace9f29250f0ff0f1d0300000038880003388800032400000020aa5b49568270935156c5ab0140ea2fefe7898d3ecf8d5c3947130b448eb560aa010b0600004020b6ef34e5bcb9662ee1645ab64feb6c5ec29f4e5ab2329c010000000000000000d927ccc17e9e89d135988350c6138545a0798d12ae51adb4995dbfe9adcf71d9e1f33461ba6a0418c7a734ac01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff3c0369561608ffffffffffffffff2028cd7057e92b29dc6c5fbedb17d6e3e1c1162954f066bd704d606424cf3b47db0d2f503253482f6a61786e65742fffffffff030000000000000000176a152068747470733a2f2f6a61782e6e6574776f726b200046c3230000000001511027000000000000015100000000000101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff1402ab6900000e2f503253482f6a61786e6574642fffffffff030000000000000000176a152068747470733a2f2f6a61782e6e6574776f726b2000ac23fc06000000176a1520202020202020204a41582020202020202020202000000000000000001976a914b953dad0e79288eea918085c9b72c3ca5482349388ac00000000\"],\"id\":1}", h)
	h = <-rpcOutputCh
	assert.Equal(t, "{\"jsonrpc\":\"1.0\",\"method\":\"submitblock\",\"scope\":\"chain\",\"shard_id\":1,\"params\":[\"d74f5d116c2195aab205266717ebc4057b88311ab2c7e77e67ef89da7c9933390000000000000000000000000000000000000000000000000000000000000000e9f29250ffff0d1e01000000000000201feab96d70a7d50efbe085423c4b82c0208e742ceb9575e9e0b61ba7b7935fa0a1b001c120e836c7ca347ea64156140f9f5cfa8289aa30b6e5edeba5906e91adf52de7e27de9836be7a6eebccfe2229ceef62bc4f770f51eaf5ff55b2d65d1ace9f29250f0ff0f1d0300000038880003388800032400000020aa5b49568270935156c5ab0140ea2fefe7898d3ecf8d5c3947130b448eb560aa010b0600004020b6ef34e5bcb9662ee1645ab64feb6c5ec29f4e5ab2329c010000000000000000d927ccc17e9e89d135988350c6138545a0798d12ae51adb4995dbfe9adcf71d9e1f33461ba6a0418c7a734ac01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff3c0369561608ffffffffffffffff2028cd7057e92b29dc6c5fbedb17d6e3e1c1162954f066bd704d606424cf3b47db0d2f503253482f6a61786e65742fffffffff030000000000000000176a152068747470733a2f2f6a61782e6e6574776f726b200046c32300000000015110270000000000000151000000000001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff1402ab6900000e2f503253482f6a61786e6574642fffffffff030000000000000000176a152068747470733a2f2f6a61782e6e6574776f726b2000ac23fc06000000176a1520202020202020204a41582020202020202020202000000000000000001976a914b953dad0e79288eea918085c9b72c3ca5482349388ac0000000001a1b001c120e836c7ca347ea64156140f9f5cfa8289aa30b6e5edeba5906e91ad0101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff1503c3640951000e2f503253482f6a61786e6574642fffffffff030000000000000000176a152068747470733a2f2f6a61782e6e6574776f726b2088130000000000001976a914b953dad0e79288eea918085c9b72c3ca5482349388ac00000000000000001976a914b953dad0e79288eea918085c9b72c3ca5482349388ac00000000\"],\"id\":2}", h)
}
